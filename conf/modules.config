/*
 * Define modules options
 */

process {

  // Default
  publishDir = [
    path: { "${params.outDir}/${task.process.tokenize(':')[-1].tokenize('_')[0]}" },
    mode: 'copy',
    saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
  ]

  //*******************************************
  // MAPPING
  //*******************************************

  withName:'bwaMem' {
    publishDir = [
      [
        path: { "${params.outDir}/mapping" },
	mode: 'copy',
	pattern: "*.bam",
	enabled: params.saveAlignedIntermediates
      ],
      [
        path: { "${params.outDir}/mapping/logs" },
	mode: 'copy',
	pattern: "*.log"
      ]
    ]
    ext.args = {[
        params.bwaOpts ?: '',
        "-R \"@RG\\tID:${meta.id}\\tPU:${meta.id}\\tSM:${meta.id}\\tLB:${meta.id}\\tPL:illumina\""
    ].join(' ').trim() }
  }

  withName: 'samtoolsSort' {
    publishDir = [
      path: { "${params.outDir}/preprocessing/" },
      mode: 'copy',
      pattern: '*.bai'
    ]
  }

  withName: 'samtoolsIndex' {
    publishDir = [
      path: { "${params.outDir}/mapping" },
      mode: 'copy',
      pattern: '*.bai'
    ]
  }

  //*******************************************
  // Preseq
  //*******************************************

  withName: 'preseq' {
    publishDir = [
      path: { "${params.outDir}/preprocessing/metrics/preseq" },
      mode: 'copy',
      pattern: '*.bai'
    ]
    ext.args = '-e 500e+06'
  }

  //*******************************************
  // Filtering
  //*******************************************

  withName:'sambambaMarkdup' {
    publishDir = [
      [
        path: { "${params.outDir}/preprocessing/bams/markDuplicates" },
        mode: 'copy',
        pattern: "*md.bam",
        enabled: params.saveAlignedIntermediates
      ],
      [
        path: { "${params.outDir}/preprocessing/bams/markDuplicates/stats" },
        mode: 'copy',
        pattern: '*md.flagstats'
      ]
    ]
  }

  withName:'intersectBed' {
    publishDir = [
      [
        path: { "${params.outDir}/preprocessing/bams/onTarget" },
        mode: 'copy',
        pattern: "*_onTarget.bam",
        enabled: params.saveAlignedIntermediates
      ]
    ]
  }

  withName: 'samtoolsFlagstatTarget' {
    publishDir = [
      path: {"${params.outDir}/preprocessing/bams/onTarget/stats"},
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
  }

  withName: 'samtoolsFilter' {
    publishDir = [
        path: { "${params.filteredBamDir}" },
        mode: 'copy',
        pattern: "*filtered.bam",
        enabled: params.saveAlignedIntermediates
        ]
    ext.args = {[
      params.keepDups ? "" : "-F 0x0400",
      params.mapQual > 0 ? "-q ${params.mapQual}" : "",
      params.keepSingleton ? "-F 0x004 -F 0x008 -f 0x001" : "-F 0x004",
      params.keepMultiHits ? "-F 0x100 -F 0x800" : ""
    ].join(' ').trim()}
  }

  withName: 'samtoolsFlagstatFilter' {
    publishDir = [
      path: {"${params.filteredBamDir}/stats"},
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
  }

  withName: 'samtoolsIdxstats' {
    publishDir = [
      path: {"${params.filteredBamDir}/stats"},
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
  }

  withName: 'samtoolsStats' {
    publishDir = [
      path: {"${params.filteredBamDir}/stats"},
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
  }


  //*******************************************
  // Bam QC
  //*******************************************

  withName: 'collectInsertSizeMetrics' {
    publishDir = [
      path: { "${params.outDir}/preprocessing/metrics/fragSize" },
      mode: 'copy',
      pattern: '*_insert_size_{hist.pdf,metrics.txt}',
    ]
  }

  withName: 'mosdepth' {
    publishDir = [
      [
      path: { "${params.outDir}/preprocessing/metrics/depth" },
      mode: 'copy',
      pattern: '*{.bed.gz,.bed.gz.csi}'
      ],
      [
      path: { "${params.outDir}/preprocessing/metrics/depth" },
      mode: 'copy',
      pattern: '*.*.txt'
      ]
    ]
    ext.args = [
      params.targetBed ? "--by ${params.targetBed}" : ""
    ].join(' ').trim()
  }

  withName: 'prepareExonInfo' {
    ext.args = { params.targetBed ? " | intersectBed -a stdin -b ${params.targetBed} " : "" }
  }

  withName: 'genesCoverage' {
    publishDir = [
      path: { "${params.outDir}/preprocessing/metrics/depth" },
      mode: 'copy',
      pattern: '*{.pdf,.mqc}'
    ]
  }

  withName: 'collectWgsMetrics' {
    publishDir = [
      path: { "${params.outDir}/preprocessing/metrics/WGSmetrics" },
      mode: 'copy',
      pattern: '*metrics.txt'
    ]
    //ext.args = { params.targetBed ? "gatk BedToIntervalList -I ${params.targetBed} -O intervals.bed -SD ${params.dict}": "" }
    ext.args2 = { params.targetBed ? "--INTERVALS intervals.bed" : "" }
  }


  //*******************************************
  // Identito
  //*******************************************

  withName:'identitoPolym' {
    publishDir = [
      path: {"${params.outDir}/preprocessing/identito/"}
    ]
  }


  //*******************************************
  // BQSR
  //*******************************************

  withName:'baseRecalibrator' {
    publishDir = [
      path: {"${params.bqsrBamDir}"},
      mode: 'copy',
      saveAs: { filename ->  if (params.noIntervals) filename }
    ]
    ext.args = {params.targetBed ? "-L ${params.targetBed}" : "" }
    // ext.prefix = {params.noIntervals ? "${meta.id}" : "${meta.id}_${intervalBed.baseName}"},
    // ext.args = { params.noIntervals ? params.targetBed ? "-L ${params.targetBed}" : "" : "-L ${intervalBed}" }
  }

  withName:'applyBQSR' {
    ext.args = {params.targetBed ? "-L ${params.targetBed}" : "" }
    // ext.prefix = {params.noIntervals ? "${meta.id}" : "${meta.id}_${intervalBed.baseName}"},
    // ext.args = { params.noIntervals ? params.targetBed ? "-L ${params.targetBed}" : "" : "-L ${intervalBed}" }
  }


  //*******************************************
  // HaplotypeCaller
  //*******************************************

  withName: 'haplotypeCaller' {
    ext.args = { params.targetBed ? "-L ${params.targetBed}" : "" }
    ext.args2 = { params.dbsnp ? "--D ${params.dbsnp}" : "" }
  }

  withName: 'genotypeGVCFs' {
    ext.args = { params.targetBed ? "-L ${params.targetBed}" : "" }
    ext.args2 = { params.dbsnp ? "--D ${dbsnp}" : "" }
    ext.prefix = {"${meta.id}"}
  }

  withName: 'haplotypeCallerFlow:bcftoolsNorm' {
    ext.when = {  params.tools && params.tools.contains('haplotypecaller') }
    publishDir = [
      path: {"${params.outDir}/HaplotypeCaller/"},
      mode: 'copy'
    ]
    //ext.prefix = {"${meta.id}"}
  }

  withName: 'haplotypeCallerFlow:computeTransition' {
    ext.when = {  params.tools && params.tools.contains('haplotypecaller') }
    publishDir = [
      path: {"${params.outDir}/HaplotypeCaller/transition"},
      mode: 'copy'
    ]
    //ext.prefix = {"${meta.id}"}
  }

  //*******************
  // Mutect2
  //******************

  withName: 'mutect2PairsFlow:mutect2' {
    ext.when = {  params.tools && params.tools.contains('mutect2') }
    publishDir = [
      path: {"${params.outDir}/Mutect2/stats/"},
      mode: 'copy'
    ]
    ext.args = {[
      params.mutect2Opts ?: "",
      params.baseQual ? "--min-base-quality-score ${params.baseQual}" : "",
      params.mapQual ? "--minimum-mapping-quality ${params.mapQual}" : "",
      params.orientationBiais ? "--f1r2-tar-gz f1r2.tar.gz" : "",
      "--normal-sample ${meta.normal_id}"
    ].join(' ').trim()}
  }

  withName: 'mutect2PairsFlow:mergeMutect2Stats' {
    ext.when = {  params.tools && params.tools.contains('mutect2') }
    publishDir = [
      path: {"${params.outDir}/Mutect2/"},
      mode: 'copy'
    ]
    ext.args = {[
      params.mutect2Opts ?: "",
      params.baseQual ? "--min-base-quality-score ${params.baseQual}" : "",
      params.mapQual ? "--minimum-mapping-quality ${params.mapQual}" : "",
      "--normal-sample ${meta.normal_id}"
    ].join(' ').trim()}
  }

  withName: 'concatVCF' {
    ext.when = {  params.tools && params.tools.contains('mutect2') || params.tools.contains('haplotypecaller') }
    publishDir = [
      path: {"${params.outDir}/Mutect2/stats/"},
      mode: 'copy',
      saveAs: { filename -> if ("${variantCaller}"=="Mutect2") "Mutect2/$filename"
                else "HaplotypeCaller/$filename" }
    ]

    ext.args = {[
      params.targetBed ? "-t ${params.targetBed }" : "",
      params.noIntervals ? "-n" : ""
    ].join(' ').trim()}
  }

  //*******************
  // Mutect2 filtering
  //******************

  withName: 'mutect2PairsFlow:learnReadOrientationModel' {
    ext.when = {  params.tools && params.tools.contains('mutect2') && params.orientationBiais }
  }

  withName: 'mutect2PairsFlow:getPileupSummaries' {
    ext.when = {  params.tools && params.tools.contains('mutect2') && !params.skipMutectContamination }
    publishDir = [
      path: {"${params.outDir}/Mutect2/contamination/"},
      mode: 'copy'
    ]
    ext.args = { params.noIntervals ? params.targetBed ? "-L ${targetBed}" : "-L ${germlineResource}" : "-L ${intervalBed}" }
  }

  withName: 'mutect2PairsFlow:gatherPileupSummaries' {
    ext.when = {  params.tools && params.tools.contains('mutect2') && !params.skipMutectContamination }
    publishDir = [
      path: {"${params.outDir}/Mutect2/contamination/"},
      mode: 'copy'
    ]
    ext.args = { params.noIntervals ? params.targetBed ? "-L ${targetBed}" : "-L ${germlineResource}" : "-L ${intervalBed}" }
  }

  withName: 'mutect2PairsFlow:calculateContamination' {
    ext.when = {  params.tools && params.tools.contains('mutect2') && !params.skipMutectContamination }
    publishDir = [
      path: {"${params.outDir}/Mutect2/contamination/"},
      mode: 'copy'
    ]
  }

  withName: 'mutect2PairsFlow:filterMutect2Calls' {
    ext.when = {  params.tools && params.tools.contains('mutect2') }
    publishDir = [
      path: {"${params.outDir}/Mutect2/"},
      mode: 'copy',
      saveAs: {filename -> if ( filename.endsWith("callingMetrics.mqc") || filename.endsWith("filteringStats.tsv")) "stats/$filename"
                           else "$filename"}
    ]
    ext.args = { !params.skipMutectContamination ? "--contamination-table ${contaminationTable}" : "" }
    ext.args2 = { ${params.orientationBiais} ? "--ob-priors ${readOrientation}" : "" }
  }

  withName: 'mutect2PairsFlow:collectVCFmetrics' {
    ext.when = {  params.tools && params.tools.contains('mutect2') }
    ext.args = { !params.skipMutectContamination ? "-c ${contaminationTable}" : "" }
    ext.prefix = {"${meta.id}"}
  }

  withName: 'mutect2PairsFlow:bcftoolsNorm' {
    ext.when = {  params.tools && params.tools.contains('mutect2') }
    publishDir = [
      path: {"${params.outDir}/Mutect2/"},
      mode: 'copy'
    ]
    ext.prefix = {"${meta.id}"}
  }

  withName: 'haplotypeCallerFlow:computeTransition' {
    ext.when = {  params.tools && params.tools.contains('mutect2') }
    publishDir = [
      path: {"${params.outDir}/Mutect2/transition"},
      mode: 'copy'
    ]
    ext.prefix = {"${meta.id}"}
  }

  //******************************************
  // TMB
  //******************************************

  withName:'tmb' {
    publishDir = [
      path: { "${params.outDir}/tmb" },
      mode: 'copy'
    ]
    ext.args = params.tmbFilters ?: ''
    ext.when = {  params.tools && params.tools.contains('tmb')}
  }

 //*******************************************
 // MSI
 //*******************************************

  withName:'msisensorpro.*' {
    publishDir = [
      path: { "${params.outDir}/msi" },
      mode: 'copy'
    ]
    ext.when = {  params.tools && params.tools.contains('msisensor')}
  }


  //*******************************************
  // Manta
  //*******************************************

  withName:'manta' {
    ext.when = {  params.tools && params.tools.contains('manta') && !params.singleEnd }
    publishDir = [
      path: { "${params.outDir}/Manta" },
      mode: 'copy'
    ]
    ext.beforeScript = { params.targetBed ? "bgzip --threads ${task.cpus} -c ${targetBed} > call_targets.bed.gz ; tabix call_targets.bed.gz" : "" }
    ext.args = { params.targetBed ? "--exome --callRegions call_targets.bed.gz" : "" }
  }

  //******************************************
  // Annotate
  //******************************************

  withName:'snpEff' {
    publishDir = [
      path: { "${params.outDir}/snpEff" },
      mode: 'copy'
    ]
    ext.args = params.snpeffOpts ?: ''
  }

  //******************************************
  // facets
  //******************************************

  withName:'facetsPileup' {
    ext.when = {  params.tools && params.tools.contains('facets')}
  }

  withName:'facets' {
    ext.when = {  params.tools && params.tools.contains('facets')}
    publishDir = [
      path: { "${params.outDir}/Facets" },
      mode: 'copy'
    ]
  }

  //******************************************
  // ascat
  //******************************************

  withName:'alleleCounter' {
    ext.when = {  params.tools && params.tools.contains('ascat')}
  }

  withName:'convertAlleleCounts' {
    ext.when = {  params.tools && params.tools.contains('ascat')}
    publishDir = [
      path: { "${params.outDir}/ASCAT" },
      mode: 'copy'
    ]
  }

  withName:'ascat' {
    ext.when = {  params.tools && params.tools.contains('ascat')}
    publishDir = [
      path: { "${params.outDir}/ASCAT" },
      mode: 'copy'
    ]
  }

  withName:'snpSiftCosmic'{
    publishDir = [
      path: { "${params.outDir}/snpEff" },
      mode: 'copy',
      enabled: params.annotDb && !params.annotDb.contains('icgc|cancerhotspots|gnomad|dbnsfp')
    ]
    ext.args="-tabix -noId -noInfo -exists COSMIC"
    ext.prefix={"${vcf[0].simpleName}_COSMIC"}
    ext.when=params.annotDb.contains('cosmic')
  }

  withName:'snpSiftIcgc'{
    publishDir = [
      path: { "${params.outDir}/snpEff" },
      mode: 'copy',
      enabled: params.annotDb && !params.annotDb.contains('cancerhotspots|gnomad|dbnsfp')
    ]
    ext.args="-tabix -noId -noInfo -exists ICGC"
    ext.prefix={"${vcf[0].simpleName}_ICGC"}
    ext.when=params.annotDb.contains('icgc')
  }

  withName:'snpSiftCancerHotspots'{
    publishDir = [
      path: { "${params.outDir}/snpEff" },
      mode: 'copy',
      enabled: params.annotDb && !params.annotDb.contains('gnomad|dbnsfp')
    ]
    ext.args="-tabix -noId -noInfo -exists CancerHotspots"
    ext.prefix={"${vcf[0].simpleName}_CancerHotspots"}
    ext.when=params.annotDb.contains('cancerhotspots')
  }

  withName:'snpSiftGnomAD'{
    publishDir = [
      path: { "${params.outDir}/snpEff" },
      mode: 'copy',
      enabled: params.annotDb && !params.annotDb.contains('dbnsfp')
    ]
    ext.args="-tabix -noId -Info AF"
    ext.prefix={"${vcf[0].simpleName}_GnomAD"}
    ext.when=params.annotDb.contains('gnomad')
  }

  withName:'snpSiftDbnsfp'{
    publishDir = [
      path: { "${params.outDir}/snpEff" },
      mode: 'copy'
    ]
    ext.args="-f SIFT_pred,Polyphen2_HDIV_pred,CADD_phred -collapse"
    ext.prefix={"${vcf[0].simpleName}_dbNSFP"}
    ext.when=params.annotDb.contains('dbnsfp')
  }

  withName:'snpSiftExtractFields'{
    publishDir = [
      path: { "${params.outDir}/tableReport" },
      mode: 'copy'
    ]
    ext.args=" -e '.'  -s ';'"
    ext.args2={[
      "CHROM POS REF ALT ANN[0].GENE ANN[0].IMPACT ANN[0].EFFECT ANN[0].FEATUREID ANN[0].RANK ANN[0].HGVS_C ANN[0].HGVS_P AF",
      params.annotDb.contains('cosmic') ? 'COSMIC' : '',
      params.annotDb.contains('icgc') ? 'ICGC' : '',
      params.annotDb.contains('cancerhotspots') ? 'CancerHotspots' : ''
    ].join(' ').trim()}
  }

  /*
   * Utils
   */

  withName:'outputDocumentation' {
    publishDir = [
      path: { "${params.summaryDir}" },
      mode: 'copy'
    ]
  }
}
