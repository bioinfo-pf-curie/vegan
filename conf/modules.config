/*
 * Define modules options
 */

process {

  // Default
  // publishDir = [
    // path: { "${params.outDir}/${task.process.tokenize(':')[-1].tokenize('_')[0]}" },
    // mode: 'copy',
    // saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
  // ]

  withName:'fastqc' {
    publishDir = [
      [
        path: { "${params.outDir}/Fastqc/zips/${meta.id}" },
        mode: 'copy',
        pattern: "*.zip"
      ],
      [
        path: { "${params.outDir}/Fastqc/${meta.id}" },
	      mode: "copy",
        pattern: "*.{html,txt}",
        saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
      ]
    ]
    when: !params.skipFastqc
    ext.args = '-e 500e+06'
  }

  //*******************************************
  // MAPPING
  //*******************************************

  withName:'bwaMem' {
    publishDir = [
      [
      path: { "${params.outDir}/Mapping/${meta.id}" },
      mode: 'copy',
      pattern: "*.bam",
      enabled: params.saveAlignedIntermediates
      ],
      [
      path: { "${params.outDir}/Mapping/${meta.id}/logs" },
      mode: 'copy',
      pattern: "*.log",
      enabled: params.saveAlignedIntermediates
      ]
    ]
    ext.args = {[
        params.bwaOpts ?: '',
        "-R \"@RG\\tID:${meta.id}\\tPU:${meta.id}\\tSM:${meta.id}\\tLB:${meta.id}\\tPL:illumina\""
    ].join(' ').trim() }
  }

  withName: 'mappingFlow:samtoolsSort' {
    publishDir = [
      path: { "${params.outDir}/Mapping/${meta.id}" },
      mode: 'copy',
      pattern: '*.bam',
      enabled: params.saveAlignedIntermediates
    ]
  }

  withName: 'mappingFlow:samtoolsIndex' {
    publishDir = [
      path: { "${params.outDir}/Mapping/${meta.id}" },
      mode: 'copy',
      pattern: '*.bai',
      enabled: params.saveAlignedIntermediates,
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
  }

  withName: 'mappingFlow:samtoolsFlagstat' {
    publishDir = [
      path: { "${params.outDir}/Mapping/${meta.id}" },
      mode: 'copy',
      pattern: '*.flagstats'
    ]
    ext.prefix = {"${meta.id}"}
  }

  //*******************************************
  // Preseq
  //*******************************************

  withName: 'preseq' {
    publishDir = [
      path: { "${params.outDir}/Preprocessing/${meta.id}/metrics/preseq" },
      mode: 'copy',
      pattern: '*.txt'
    ]
    ext.args = '-e 500e+06'
  }


  //*******************************************
  // Filtering
  //*******************************************

  withName:'sambambaMarkdup' {
    publishDir = [
      [
        path: { "${params.outDir}/Preprocessing/${meta.id}/bams/markDuplicates" },
        mode: 'copy',
        pattern: "*md.bam*",
        enabled: params.saveAlignedIntermediates
      ],
      [
        path: { "${params.outDir}/Preprocessing/${meta.id}/bams/markDuplicates/stats" },
        mode: 'copy',
        pattern: '*md.flagstats',
        enabled: params.saveAlignedIntermediates
      ]
    ]
  }

  withName:'intersectBed' {
    publishDir = [
      [
        path: { "${params.outDir}/Preprocessing/${meta.id}/bams/onTarget" },
        mode: 'copy',
        pattern: "*onTarget.bam",
        enabled: params.saveAlignedIntermediates
      ]
    ]
  }

  withName:'samtoolsIndexTarget' {
    publishDir = [
      [
        path: { "${params.outDir}/Preprocessing/${meta.id}/bams/onTarget" },
        mode: 'copy',
        pattern: "*onTarget.bam.bai",
        enabled: params.saveAlignedIntermediates
      ]
    ]
  }

  withName: 'samtoolsFlagstatTarget' {
    publishDir = [
      path: {"${params.outDir}/Preprocessing/${meta.id}/bams/onTarget/stats"},
      mode: 'copy',
      enabled: params.saveAlignedIntermediates,
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
  }

  withName: 'samtoolsFilter' {
    publishDir = [
        path: { "${params.outDir}/Preprocessing/${meta.id}/bams/filtering" },
        mode: 'copy',
        pattern: "*filtered.bam",
        enabled: params.saveAlignedIntermediates
        ]
    ext.args = {[
      params.keepDups ? "" : "-F 0x0400",
      params.mapQual > 0 ? "-q ${params.mapQual}" : "",
      params.keepSingleton ? "-F 0x004 -F 0x008 -f 0x001" : "-F 0x004",
      params.keepMultiHits ? "-F 0x100 -F 0x800" : ""
    ].join(' ').trim()}
  }

  withName: 'samtoolsFlagstatFilter' {
    publishDir = [
      path: {"${params.outDir}/Preprocessing/${meta.id}/bams/filtering/stats"},
      mode: 'copy',
      enabled: params.saveAlignedIntermediates,
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
  }

  withName: 'samtoolsIdxstats' {
    publishDir = [
      path: {"${params.outDir}/Preprocessing/${meta.id}/bams/filtering/stats"},
      mode: 'copy',
      enabled: params.saveAlignedIntermediates,
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
  }

  withName: 'samtoolsStats' {
    publishDir = [
      path: {"${params.outDir}/Preprocessing/${meta.id}/bams/filtering/stats"},
      mode: 'copy',
      enabled: params.saveAlignedIntermediates,
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
  }


  //*******************************************
  // Bam QC
  //*******************************************

  withName: 'collectInsertSizeMetrics' {
    publishDir = [
      path: { "${params.outDir}/Preprocessing/${meta.id}/metrics/fragSize" },
      mode: 'copy',
      pattern: '*_insert_size_{histogram.pdf,metrics.txt}'
    ]
  }

  withName: 'mosdepth' {
    publishDir = [
      [
      path: { "${params.outDir}/Preprocessing/${meta.id}/metrics/depth" },
      mode: 'copy',
      pattern: '*{.bed.gz,.bed.gz.csi}'
      ],
      [
      path: { "${params.outDir}/Preprocessing/${meta.id}/metrics/depth" },
      mode: 'copy',
      pattern: '*.*.txt'
      ]
    ]
    ext.args = "-n --quantize 0:1:10:50:100:"
  }

  withName: 'genesCoverage' {
    publishDir = [
      path: { "${params.outDir}/Preprocessing/${meta.id}/metrics/depth" },
      mode: 'copy',
      pattern: '*{.pdf,.mqc}'
    ]
  }

  withName: 'collectWgsMetrics' {
    publishDir = [
      path: { "${params.outDir}/Preprocessing/${meta.id}/metrics/WGSmetrics" },
      mode: 'copy',
      pattern: '*metrics.txt'
    ]
    //ext.args = { params.targetBed ? "gatk BedToIntervalList -I ${params.targetBed} -O intervals.bed -SD ${params.dict}": "" }
    ext.args2 = { params.targetBed ? "--INTERVALS intervals.bed" : "" }
  }

  //*******************************************
  // Identito
  //*******************************************

  withName:'identitoCombine' {
    publishDir = [
      path: {"${params.outDir}/Identito/"},
      mode: 'copy',
      pattern: '*.{tsv,csv,png}',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
  }

  withName:'identitoClustering' {
    publishDir = [
      path: {"${params.outDir}/Identito/"},
      mode: 'copy',
      pattern: '*.{tsv,csv,png}',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
  }

  //*******************************************
  // BQSR
  //*******************************************

  withName:'baseRecalibrator' {
    publishDir = [
      path: { "${params.outDir}/Preprocessing/${meta.id}/bams/bqsr/" },
      mode: 'copy',
      saveAs: { filename ->  if (params.noIntervals) filename }
    ]
    ext.when = !params.skipBQSR
    ext.args = {params.targetBed ? "-L ${params.targetBed}" : "" }
  }

  withName:'applyBQSR' {
    publishDir = [
      path: {"${params.outDir}/Preprocessing/${meta.id}/bams/bqsr/"},
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
    ext.when = !params.skipBQSR
    ext.args = {params.targetBed ? "-L ${params.targetBed}" : "" }
  }

  withName:'bqsrFlow:samtoolsIndex' {
    publishDir = [
      path: {"${params.outDir}/Preprocessing/${meta.id}/bams/bqsr/"},
      mode: 'copy'
    ]
  }

  //*******************************************
  // HaplotypeCaller
  //*******************************************

  withName: 'haplotypeCaller' {
    ext.args = { params.targetBed ? "-L ${params.targetBed}" : "" }
    ext.args2 = { params.dbsnp ? "--D ${params.dbsnp}" : "" }
  }

  withName: 'genotypeGVCFs' {
    ext.args = { params.targetBed ? "-L ${params.targetBed}" : "" }
    ext.args2 = { params.dbsnp ? "--D ${dbsnp}" : "" }
  }

  withName: 'haplotypeCallerFlow:collectVCFmetrics' {
    ext.when = {  params.tools && params.tools.contains('haplotypecaller') }
    publishDir = [
      path : {"${params.outDir}/HaplotypeCaller/${meta.id}/stats" },
      mode: 'copy',
      pattern: '*_callingMetrics.mqc',
      enabled: params.saveAdditionalResults
      ]
  }

  withName: 'haplotypeCallerFlow:bcftoolsNorm' {
    ext.when = {  params.tools && params.tools.contains('haplotypecaller') }
    publishDir = [
      path : {"${params.outDir}/HaplotypeCaller/${meta.id}/" },
      mode: 'copy',
      pattern: '*_norm.vcf.gz*'
    ]
  }

  withName: 'haplotypeCallerFlow:computeTransition' {
    ext.when = {  params.tools && params.tools.contains('haplotypecaller') }
    publishDir = [
      path : {"${params.outDir}/HaplotypeCaller/${meta.id}/transition" },
      mode: 'copy',
      enabled: params.saveAdditionalResults
    ]
  }

  //*******************
  // Mutect2
  //******************

  withName: 'mutect2PairsFlow:mutect2' {
    ext.when = {  params.tools && params.tools.contains('mutect2') }
    publishDir = [
      path: {"${params.outDir}/Mutect2/${meta.id}/"},
      mode: 'copy',
      pattern: '*{.vcf.gz, vcf.gz.tbi}'
    ]
    ext.args = {[
      params.mutect2Opts ?: "",
      params.baseQual ? "--min-base-quality-score ${params.baseQual}" : "",
      params.mapQual ? "--minimum-mapping-quality ${params.mapQual}" : "",
      params.orientationBiais ? "--f1r2-tar-gz f1r2.tar.gz" : "",
      "--normal-sample ${meta.normal_id}"
    ].join(' ').trim()}
  }

  withName: 'mutect2PairsFlow:mergeMutect2Stats' {
    ext.when = {  params.tools && params.tools.contains('mutect2') }
    publishDir = [
      path: {"${params.outDir}/Mutect2/${meta.id}/stats/"},
      mode: 'copy',
      enabled: params.saveAdditionalResults
    ]
    ext.args = {[
      params.mutect2Opts ?: "",
      params.baseQual ? "--min-base-quality-score ${params.baseQual}" : "",
      params.mapQual ? "--minimum-mapping-quality ${params.mapQual}" : "",
      "--normal-sample ${meta.normal_id}"
    ].join(' ').trim()}
  }

  //*******************
  // Mutect2 filtering
  //******************

  withName: 'mutect2PairsFlow:learnReadOrientationModel' {
    ext.when = {  params.tools && params.tools.contains('mutect2') && params.orientationBiais }
  }

  withName: 'mutect2PairsFlow:getPileupSummaries' {
    ext.when = {  params.tools && params.tools.contains('mutect2') && !params.skipMutectContamination }
    publishDir = [
      path: {"${params.outDir}/Mutect2/${meta.id}/contamination/"},
      mode: 'copy',
      enabled: params.saveAdditionalResults
    ]
    ext.prefix = { "${meta.status}" == "pair" ? "${meta.tumor_id}_vs_${meta.normal_id}" : "${meta.id}" }
    ext.args = { params.targetBed ? "-L ${targetBed}" : "-L ${germlineResource}" }
  }

  withName: 'mutect2PairsFlow:gatherPileupSummaries' {
    ext.when = {  params.tools && params.tools.contains('mutect2') && !params.skipMutectContamination }
    publishDir = [
      path: {"${params.outDir}/Mutect2/${meta.id}/contamination/"},
      mode: 'copy',
      enabled: params.saveAdditionalResults
    ]
    ext.args = { params.noIntervals ? params.targetBed ? "-L ${targetBed}" : "-L ${germlineResource}" : "-L ${intervalBed}" }
  }

  withName: 'mutect2PairsFlow:calculateContamination' {
    ext.when = {  params.tools && params.tools.contains('mutect2') && !params.skipMutectContamination }
    publishDir = [
      path: {"${params.outDir}/Mutect2/${meta.id}/contamination/"},
      mode: 'copy',
      enabled: params.saveAdditionalResults
    ]
  }

  withName: 'mutect2PairsFlow:filterMutect2Calls' {
    ext.when = {  params.tools && params.tools.contains('mutect2') }
    publishDir = [[
      path: {"${params.outDir}/Mutect2/${meta.id}/"},
      mode: 'copy',
      pattern: '*filtered{.vcf.gz,.vcf.gz.tbi}'
      ],
      [
      path: {"${params.outDir}/Mutect2/${meta.id}/stats"},
      mode: 'copy',
      pattern: '*{filteringStats.tsv}'
    ]]
    ext.args = { !params.skipMutectContamination ? "--contamination-table ${contaminationTable}" : "" }
    ext.args2 = { params.orientationBiais ? "--ob-priors ${readOrientation}" : "" }
  }

  withName: 'mutect2PairsFlow:collectVCFmetrics' {
    publishDir = [
      path: {"${params.outDir}/Mutect2/${meta.id}/stats"},
      mode: 'copy',
      pattern: '*_callingMetrics.mqc',
      enabled: params.saveAdditionalResults
      ]
    ext.when = {  params.tools && params.tools.contains('mutect2') }
    ext.prefix = { "${meta.status}" == "pair" ? "${meta.tumor_id}_vs_${meta.normal_id}" : "${meta.id}" }
  }

  withName: 'mutect2PairsFlow:bcftoolsNorm' {
    ext.when = {  params.tools && params.tools.contains('mutect2') }
    publishDir = [[
      path: {"${params.outDir}/Mutect2/${meta.id}/"},
      mode: 'copy',
      saveAs: { filename -> "${meta.tumor_id}_vs_${meta.normal_id}_Mutect2_filtered_pass_norm.vcf.gz" },
      pattern: '*_norm.vcf.gz'
    ],
    [
    path: {"${params.outDir}/Mutect2/${meta.id}/"},
    mode: 'copy',
    saveAs: { filename -> "${meta.tumor_id}_vs_${meta.normal_id}_Mutect2_filtered_pass_norm.vcf.gz.tbi" },
    pattern: '*_norm.vcf.gz.tbi'
    ]]
    ext.prefix = { "${meta.status}" == "pair" ? "${meta.tumor_id}_vs_${meta.normal_id}" : "${meta.id}" }
  }

  withName: 'mutect2PairsFlow:computeTransition' {
    ext.when = {  params.tools && params.tools.contains('mutect2') }
    publishDir = [
      path: {"${params.outDir}/Mutect2/${meta.id}/transition"},
      mode: 'copy',
      enabled: params.saveAdditionalResults
    ]
    ext.prefix = { "${meta.status}" == "pair" ? "${meta.tumor_id}_vs_${meta.normal_id}" : "${meta.id}" }
  }

  //******************************************
  // Annotate Germline
  //******************************************

  withName:'annotateGermlineFlow:snpEff' {
    publishDir = [
      path: {"${params.outDir}/SnpEff/HaplotypeCaller/${meta.id}/" },
      mode: 'copy',
      pattern: '*{csv,txt,html}',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
    ext.args = params.snpeffOpts ?: ''
  }

  withName:'annotateGermlineFlow:snpSiftGnomAD'{
    ext.when=params.annotDb.contains('gnomad')
    publishDir = [
      path: {"${params.outDir}/SnpEff/HaplotypeCaller/${meta.id}/Additionnal" },
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename },
      enabled: params.annotDb && !params.annotDb.contains('dbnsfp')
    ]
    ext.prefix={"${vcf[0].simpleName}_GnomAD"}
    ext.args="-tabix -noId -Info AF"
  }

  withName:'annotateGermlineFlow:snpSiftDbnsfp'{
    ext.when=params.annotDb.contains('dbnsfp')
    publishDir = [
      path: {"${params.outDir}/SnpEff/HaplotypeCaller/${meta.id}" },
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
    ext.prefix={"${vcf[0].simpleName}_dbNSFP"}
    ext.args="-f SIFT_pred,Polyphen2_HDIV_pred,CADD_phred -collapse"
  }

  //******************************************
  // Annotate Somatic
  //******************************************


  withName:'annotateSomaticFlow:snpEff' {
    publishDir = [
      path: { "${params.outDir}/SnpEff/Mutect2/${meta.id}" },
      mode: 'copy',
      pattern: '*{csv,txt,html}',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
    ext.prefix = { "${meta.status}" == "pair" ? "${meta.tumor_id}_vs_${meta.normal_id}" : "${meta.id}" }
    ext.args = params.snpeffOpts ?: ''
  }

  withName:'annotateSomaticFlow:snpSiftCosmic'{
    ext.when=params.annotDb.contains('cosmic')
    publishDir = [
      path: {"${params.outDir}/SnpEff/Mutect2/${meta.id}/Additionnal" },
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename },
      enabled: params.annotDb && !params.annotDb.contains('icgc|cancerhotspots|gnomad|dbnsfp')
    ]
    ext.prefix={"${vcf[0].simpleName}_COSMIC"}
    ext.args="-tabix -noId -noInfo -exists COSMIC"
  }

  withName:'annotateSomaticFlow:snpSiftIcgc'{
    ext.when=params.annotDb.contains('icgc')
    publishDir = [
      path: {"${params.outDir}/SnpEff/Mutect2/${meta.id}/Additionnal" },
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename },
      enabled: params.annotDb && !params.annotDb.contains('cancerhotspots|gnomad|dbnsfp')
    ]
    ext.prefix={"${vcf[0].simpleName}_ICGC"}
    ext.args="-tabix -noId -noInfo -exists ICGC"
  }

  withName:'annotateSomaticFlow:snpSiftCancerHotspots'{
    ext.when=params.annotDb.contains('cancerhotspots')
    publishDir = [
      path: {"${params.outDir}/SnpEff/Mutect2/${meta.id}/Additionnal" },
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename },
      enabled: params.annotDb && !params.annotDb.contains('gnomad|dbnsfp')
    ]
    ext.prefix={"${vcf[0].simpleName}_CancerHotspots"}
    ext.args="-tabix -noId -noInfo -exists CancerHotspots"
  }

  withName:'annotateSomaticFlow:snpSiftGnomAD'{
    ext.when=params.annotDb.contains('gnomad')
    publishDir = [
      path: {"${params.outDir}/SnpEff/Mutect2/${meta.id}/Additionnal" },
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename },
      enabled: params.annotDb && !params.annotDb.contains('dbnsfp')
    ]
    ext.prefix={"${vcf[0].simpleName}_GnomAD"}
    ext.args="-tabix -noId -Info AF"
  }

  withName:'annotateSomaticFlow:snpSiftDbnsfp'{
    ext.when=params.annotDb.contains('dbnsfp')
    publishDir = [
      path: {"${params.outDir}/SnpEff/Mutect2/${meta.id}" },
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
    ext.prefix={"${vcf[0].simpleName}_dbNSFP"}
    ext.args="-f SIFT_pred,Polyphen2_HDIV_pred,CADD_phred -collapse"
  }

  withName:'tableReportFlowStep:snpSiftExtractFields'{
    publishDir = [
      path: {"${params.outDir}/TableReport/${meta.id}" },
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
    ext.prefix = { "${meta.status}" == "pair" ? "${meta.tumor_id}_vs_${meta.normal_id}" : "${meta.id}" }
    ext.args=" -e '.'  -s ';'"
    ext.args2={[
      "CHROM POS REF ALT ANN[0].GENE ANN[0].IMPACT ANN[0].EFFECT ANN[0].FEATUREID ANN[0].RANK ANN[0].HGVS_C ANN[0].HGVS_P AF",
      params.annotDb.contains('cosmic') ? 'COSMIC' : '',
      params.annotDb.contains('icgc') ? 'ICGC' : '',
      params.annotDb.contains('cancerhotspots') ? 'CancerHotspots' : ''
    ].join(' ').trim()}
  }

  withName:'tableReportFlowSomatic:snpSiftExtractFields'{
    publishDir = [
      path: {"${params.outDir}/TableReport/${meta.id}" },
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
    ext.prefix = { "${meta.status}" == "pair" ? "${meta.tumor_id}_vs_${meta.normal_id}" : "${meta.id}" }
    ext.args=" -e '.'  -s ';'"
    ext.args2={[
      "CHROM POS REF ALT ANN[0].GENE ANN[0].IMPACT ANN[0].EFFECT ANN[0].FEATUREID ANN[0].RANK ANN[0].HGVS_C ANN[0].HGVS_P AF",
      params.annotDb.contains('cosmic') ? 'COSMIC' : '',
      params.annotDb.contains('icgc') ? 'ICGC' : '',
      params.annotDb.contains('cancerhotspots') ? 'CancerHotspots' : ''
    ].join(' ').trim()}
  }

  withName:'tableReportFlowGermline:snpSiftExtractFields'{
    publishDir = [
      path: {"${params.outDir}/TableReport/${meta.id}" },
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
    ext.args=" -e '.'  -s ';'"
    ext.args2={"CHROM POS REF ALT ANN[0].GENE ANN[0].IMPACT ANN[0].EFFECT ANN[0].FEATUREID ANN[0].RANK ANN[0].HGVS_C ANN[0].HGVS_P AF"}
  }

  //******************************************
  // TMB
  //******************************************

  withName:'tmb' {
    ext.when = {  params.tools && params.tools.contains('tmb')}
    publishDir = [
      path: { "${params.outDir}/TMB/${meta.id}" },
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
    ext.args = params.tmbFilters ?: ''
  }

  //*******************************************
  // MSI
  //*******************************************

  withName:'msisensorproMsi' {
    ext.when = {  params.tools && params.tools.contains('msisensor')}
    publishDir = [
      path: { "${params.outDir}/MSI/${meta.id}" },
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
  }

  //*******************************************
  // Manta
  //*******************************************

  withName:'manta' {
    ext.when = {  params.tools && params.tools.contains('manta') && !params.singleEnd }
    publishDir = [[
      path: { "${params.outDir}/Manta/${meta.id}" },
      mode: 'copy',
      pattern: '*somatic*'
    ],
    [
      path: { "${params.outDir}/Manta/${meta.id}/Additionnal" },
      mode: 'copy',
      pattern: '*{diploid,candidate}*',
      enabled: params.saveAdditionalResults
    ]]
    ext.beforeScript = { params.targetBed ? "bgzip --threads ${task.cpus} -c ${targetBed} > call_targets.bed.gz ; tabix call_targets.bed.gz" : "" }
    ext.prefix = { "${meta.status}" == "pair" ? "${meta.tumor_id}_vs_${meta.normal_id}" : "${meta.id}" }
    ext.args = { params.targetBed ? "--exome --callRegions call_targets.bed.gz" : "" }
  }

  //******************************************
  // facets
  //******************************************

  withName:'facetsPileup' {
    ext.when = {  params.tools && params.tools.contains('facets')}
  }

  withName:'facets' {
    ext.when = {  params.tools && params.tools.contains('facets')}
    publishDir = [
      path: { "${params.outDir}/Facets/${meta.id}" },
      mode: 'copy'
    ]
  }

  //******************************************
  // ASCAT
  //******************************************

  withName:'alleleCounter' {
    ext.when = {  params.tools && params.tools.contains('ascat')}
  }

  withName:'convertAlleleCounts' {
    ext.when = {  params.tools && params.tools.contains('ascat')}
    publishDir = [
      path: { "${params.outDir}/ASCAT/${meta.id}" },
      mode: 'copy'
    ]
  }

  withName:'ascat' {
    ext.when = {  params.tools && params.tools.contains('ascat')}
    publishDir = [
      path: { "${params.outDir}/ASCAT/${meta.id}" },
      mode: 'copy'
    ]
  }

  //******************************************
  // MultiQC
  //******************************************

  withName:'multiqc' {
    publishDir = [
      path: { "${params.outDir}/MultiQC" },
      mode: 'copy'
    ]
  }

  /*
   * Utils
   */

  withName:'outputDocumentation' {
    publishDir = [
      path: { "${params.summaryDir}" },
      mode: 'copy'
    ]
  }
}
