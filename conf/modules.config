/*
 * Define modules options
 */

process {

  // Default
  publishDir = [
    enabled: false
  ]

  withName:'fastqc' {
    publishDir = [
      [
        path: { "${params.outDir}/fastqc/zips/" },
        mode: 'copy',
        pattern: "*.zip"
      ],
      [
        path: { "${params.outDir}/fastqc/${meta.id}" },
	      mode: "copy",
        pattern: "*.{html,txt}",
        saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
      ]
    ]
    ext.prefix = { "${reads[0].simpleName}" }
    ext.when = !params.skipFastqc
  }

  //*******************************************
  // MAPPING
  //*******************************************

  withName:'bwamem' {
    publishDir = [
      [
        path: { "${params.outDir}/preprocessing/${meta.id}/bams/" },
        mode: 'copy',
        pattern: "*.bam",
        enabled: params.saveAlignedIntermediates
      ],
      [
        path: { "${params.outDir}/preprocessing/${meta.id}/bams/logs" },
        mode: 'copy',
        pattern: "*.log",
        enabled: params.saveAlignedIntermediates
      ]
    ]
    ext.args = {[
        params.bwaOpts ?: '', 
        "-R \"@RG\\tID:${meta.id}\\tPU:${meta.id}\\tSM:${meta.id}\\tLB:${meta.id}\\tPL:illumina\"",
	params.sequencingCenter ? "CN:${params.sequencingCenter}\\t" : ""
    ].join(' ').trim() }
    ext.prefix = { "${meta.part} > 1" ? "${meta.id}_part${meta.chunk}" : "${meta.id}" }
  }

  withName:'bwamem2' {
    publishDir = [
      [
        path: { "${params.outDir}/preprocessing/${meta.id}/bams/" },
        mode: 'copy',
        pattern: "*.bam",
        enabled: params.saveAlignedIntermediates
      ],
      [
        path: { "${params.outDir}/preprocessing/${meta.id}/bams/logs" },
        mode: 'copy',
        pattern: "*.log",
        enabled: params.saveAlignedIntermediates
      ]
    ]
    ext.args = {[
        params.bwaOpts ?: '',
        "-R \"@RG\\tID:${meta.id}\\tPU:${meta.id}\\tSM:${meta.id}\\tLB:${meta.id}\\tPL:illumina\"",
        params.sequencingCenter ? "CN:${params.sequencingCenter}\\t" : ""
    ].join(' ').trim() }
    ext.prefix = { "${meta.part} > 1" ? "${meta.id}_part${meta.chunk}" : "${meta.id}" }
  }

  withName:'dragmap' {
    publishDir = [
      [
        path: { "${params.outDir}/preprocessing/${meta.id}/bams/" },
        mode: 'copy',
        pattern: "*.bam",
        enabled: params.saveAlignedIntermediates
      ],
      [
        path: { "${params.outDir}/preprocessing/${meta.id}/bams/logs" },
        mode: 'copy',
        pattern: "*.log",
        enabled: params.saveAlignedIntermediates
      ]
    ]
    ext.args = {[
      params.dragmapOpts ?: '',
      "--RGSM ${meta.id} --RGID ${meta.id}"
    ].join(' ').trim() }
    ext.prefix = { "${meta.part} > 1" ? "${meta.id}_part${meta.chunk}" : "${meta.id}" } 
  }

  withName: 'mappingFlow:samtoolsSort' {
    publishDir = [
      path: { "${params.outDir}/preprocessing/${meta.id}/bams/bwa" },
      mode: 'copy',
      pattern: '*.bam',
      enabled: params.saveAlignedIntermediates
    ]
  }

  withName: 'mappingFlow:samtoolsIndex' {
    publishDir = [
      path: { "${params.outDir}/preprocessing/${meta.id}/bams/bwa" },
      mode: 'copy',
      pattern: '*.bai',
      enabled: params.saveAlignedIntermediates,
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
  }

  withName: 'mappingFlow:samtoolsFlagstat' {
    publishDir = [
      path: { "${params.outDir}/preprocessing/${meta.id}/bams/bwa" },
      mode: 'copy',
      pattern: '*.flagstats'
    ]
    ext.prefix = {"${meta.id}"}
  }

  //*******************************************
  // Preseq
  //*******************************************

  withName: 'preseq' {
    publishDir = [
      path: { "${params.outDir}/preprocessing/${meta.id}/metrics/preseq" },
      mode: 'copy',
      pattern: '*.txt',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
    ext.args = '-e 500e+06'
  }

  //*******************************************
  // Filtering
  //*******************************************

  withName:'sambambaMarkdup' {
    publishDir = [
      [
        path: { "${params.outDir}/preprocessing/${meta.id}/bams/markDuplicates" },
        mode: 'copy',
        pattern: "*md.bam*",
        enabled: params.saveAlignedIntermediates
      ]
    ]
  }

  withName: 'samtoolsFlagstatMarkdup' {
    publishDir = [
      path: {"${params.outDir}/preprocessing/${meta.id}/bams/markDuplicates/stats"},
      mode: 'copy',
      enabled: params.saveAlignedIntermediates,
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
  }

  withName:'intersectBed' {
    publishDir = [
      [
        path: { "${params.outDir}/preprocessing/${meta.id}/bams/onTarget" },
        mode: 'copy',
        pattern: "*onTarget.bam",
        enabled: params.saveAlignedIntermediates
      ]
    ]
    ext.when = { params.targetBed }
  }

  withName: 'samtoolsFlagstatOnTarget' {
    publishDir = [
      path: {"${params.outDir}/preprocessing/${meta.id}/bams/onTarget/stats"},
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename },
      enabled: params.saveAlignedIntermediates
    ]
  }

  withName: 'samtoolsFilter' {
    publishDir = [
      path: { "${params.outDir}/preprocessing/${meta.id}/bams/filtering" },
      mode: 'copy',
      pattern: "*filtered.bam",
      enabled: params.saveAlignedIntermediates | params.skipBQSR
    ]
    ext.args = {[
      params.keepDups ? "" : "-F 0x0400",
      params.mapQual > 0 ? "-q ${params.mapQual}" : "",
      params.keepSingleton ? "-F 0x004 -F 0x008 -f 0x001" : "-F 0x004",
      params.keepMultiHits ? "-F 0x100 -F 0x800" : ""
    ].join(' ').trim()}
  }

  withName: 'samtoolsFlagstatFilter' {
    publishDir = [
      path: {"${params.outDir}/preprocessing/${meta.id}/bams/filtering/stats"},
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename },
      enabled: params.saveAlignedIntermediates | params.skipBQSR
    ]
  }

  withName: 'samtoolsIdxstats' {
    publishDir = [
      path: {"${params.outDir}/preprocessing/${meta.id}/bams/filtering/stats"},
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename },
      enabled: params.saveAlignedIntermediates | params.skipBQSR
    ]
  }

  withName: 'samtoolsStats' {
    publishDir = [
      path: {"${params.outDir}/preprocessing/${meta.id}/bams/filtering/stats"},
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename },
      enabled: params.saveAlignedIntermediates | params.skipBQSR
    ]
  }


  //*******************************************
  // Bam QC
  //*******************************************

  withName: 'collectInsertSizeMetrics' {
    publishDir = [
      path: { "${params.outDir}/preprocessing/${meta.id}/metrics/fragSize" },
      mode: 'copy',
      pattern: '*_insert_size_{histogram.pdf,metrics.txt}'
    ]
  }

  withName: 'mosdepth' {
    publishDir = [
      [
        path: { "${params.outDir}/preprocessing/${meta.id}/metrics/depth" },
        mode: 'copy',
        pattern: '*{.bed.gz,.bed.gz.csi}'
      ],
      [
        path: { "${params.outDir}/preprocessing/${meta.id}/metrics/depth" },
        mode: 'copy',
        pattern: '*.*.txt'
      ]
    ]
    ext.args = "-n --quantize 0:1:10:50:100:"
  }

  withName: 'genesCoverage' {
    publishDir = [
      path: { "${params.outDir}/preprocessing/${meta.id}/metrics/depth" },
      mode: 'copy',
      pattern: '*{.pdf,.mqc}'
    ]
  }

  withName: 'collectWgsMetrics' {
    publishDir = [
      path: { "${params.outDir}/preprocessing/${meta.id}/metrics/WGSmetrics" },
      mode: 'copy',
      pattern: '*metrics.txt'
    ]
  }

  //*******************************************
  // Identito
  //*******************************************

  withName:'identitoPolym' {
    publishDir = [
      path: {"${params.outDir}/identito/"},
      mode: 'copy',
      pattern: '*.tsv',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
    ext.when = !params.skipIdentito
  }

  withName:'identitoCombine' {
    publishDir = [
      path: {"${params.outDir}/identito/"},
      mode: 'copy',
      pattern: '*.{tsv,csv,png}',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
    ext.when = !params.skipIdentito
  }

  withName:'identitoClustering' {
    publishDir = [
      path: {"${params.outDir}/identito/"},
      mode: 'copy',
      pattern: '*.{tsv,csv,png}',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
    ext.when = !params.skipIdentito
  }

  //*******************************************
  // BQSR
  //*******************************************

  withName:'baseRecalibrator' {
    ext.when = !params.skipBQSR
    ext.prefix = { params.targetBed || params.noIntervals ? "${meta.id}" : "${meta.id}_${intervals.simpleName}" }
  }

  withName:'applyBQSR' {
    publishDir = [
      path: {"${params.outDir}/preprocessing/${meta.id}/bams/bqsr/"},
      mode: 'copy',
      pattern: '*.bam',
      saveAs: { filename -> if (params.noIntervals || params.targetBed) filename }
    ]
    ext.when = !params.skipBQSR
    ext.prefix = {  params.targetBed || params.noIntervals ? "${meta.id}" : "${meta.id}_${intervals.simpleName}" }
  }

  withName:'gatherBQSRReports' {
    ext.when = { !params.noIntervals && !params.targetBed }
  }

  withName:'bqsrFlow:samtoolsMerge' {
    publishDir = [
      path: {"${params.outDir}/preprocessing/${meta.id}/bams/bqsr/"},
      mode: 'copy',
      pattern: '*.bam'
    ]
    ext.when = { !params.noIntervals && !params.targetBed }
  }

  withName:'bqsrFlow:samtoolsIndex' {
    publishDir = [
      path: {"${params.outDir}/preprocessing/${meta.id}/bams/bqsr/"},
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
    ext.when = !params.skipBQSR
  }

  //*******************************************
  // HaplotypeCaller
  //*******************************************

  withName: 'haplotypeCaller' {
    ext.prefix = {  params.targetBed || params.noIntervals ? "${meta.id}" : "${meta.id}_${intervals.simpleName}" }
    ext.when = {  params.tools && params.tools.contains('haplotypecaller') }
  }

  withName: 'genotypeGVCFs' {
    ext.prefix = {  params.targetBed || params.noIntervals ? "${meta.id}_HaplotypeCaller" : "${meta.id}_${intervals.simpleName}" }
  }

  withName: 'haplotypeCallerFlow:mergeVCFs' {
    ext.prefix = { "${meta.id}_HaplotypeCaller" }
    ext.when = { !params.noIntervals && !params.targetBed }
  }

  withName: 'haplotypeCallerFlow:bcftoolsNorm' {
    publishDir = [
      path : {"${params.outDir}/haplotypeCaller/${meta.id}/" },
      mode: 'copy',
      pattern: '*_norm.vcf.gz*'
    ]
    ext.prefix = { "${vcf.simpleName}" }
  }

  //*******************
  // Mutect2 Pairs
  //******************

  withName: 'mutect2Pairs' {
    ext.args = {[
      params.mutect2Opts ?: "",
      params.baseQual ? "--min-base-quality-score ${params.baseQual}" : "",
      params.mapQual ? "--minimum-mapping-quality ${params.mapQual}" : "",
      params.targetBed || params.noIntervals ? "--f1r2-tar-gz ${meta.id}_f1r2.tar.gz" : "--f1r2-tar-gz ${meta.id}_${intervals.simpleName}_f1r2.tar.gz",
      "--normal-sample ${meta.normal_id}"
    ].join(' ').trim()}
    ext.when = {  params.tools && params.tools.contains('mutect2') }
    ext.prefix = { params.targetBed || params.noIntervals ? "${meta.id}_Mutect2" : "${meta.id}_${intervals.simpleName}" }
  }

  withName: 'mutect2PairsFlow:mergeVCFs' {
    publishDir = [
      path: {"${params.outDir}/mutect2/${meta.id}/"},
      mode: 'copy',
      pattern: '*{.vcf.gz, vcf.gz.tbi}',
      enabled: params.saveVcfIntermediates
    ]
    ext.prefix = { "${meta.id}_Mutect2" }
    ext.when = { !params.noIntervals && !params.targetBed }
  }

  withName: 'mutect2PairsFlow:getPileupSummariesTumor' {
    publishDir = [
      path: {"${params.outDir}/mutect2/${meta.id}/contamination/"},
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename },
      enabled: { params.saveVcfIntermediates && (params.noIntervals || params.targetBed) }
    ]
    ext.prefix = { params.targetBed || params.noIntervals ? "${meta.tumor_id}" : "${meta.tumor_id}_${intervals.simpleName}" }
    ext.when = { !params.skipMutectContamination }
  }

  withName: 'mutect2PairsFlow:getPileupSummariesNormal' {
    publishDir = [
      path: {"${params.outDir}/mutect2/${meta.id}/contamination/"},
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename },
      enabled: { params.saveVcfIntermediates && (params.noIntervals || params.targetBed) } 
    ]
    ext.prefix = { params.targetBed || params.noIntervals ? "${meta.normal_id}" : "${meta.normal_id}_${intervals.simpleName}" }
    ext.when = { !params.skipMutectContamination }
  }

  withName: 'mutect2PairsFlow:gatherPileupSummariesTumor' {
    publishDir = [
      path: {"${params.outDir}/mutect2/${meta.id}/contamination/"},
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename },
      enabled: params.saveVcfIntermediates
    ]
    ext.prefix = { "${meta.tumor_id}" }
    ext.when = { !params.skipMutectContamination && !params.noIntervals && !params.targeBed }
  }

  withName: 'mutect2PairsFlow:gatherPileupSummariesNormal' {
    publishDir = [
      path: {"${params.outDir}/mutect2/${meta.id}/contamination/"},
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename },
      enabled: params.saveVcfIntermediates
    ]
    ext.prefix = { "${meta.normal_id}" }
    ext.when = { !params.skipMutectContamination && !params.noIntervals && !params.targetBed }
  }

  //*******************
  // Mutect2 Tumor only
  //*******************

  withName: 'mutect2TumorOnlyFlow:mutect2Tumor' {
    ext.args = {[
      params.mutect2Opts ?: "",
      params.baseQual ? "--min-base-quality-score ${params.baseQual}" : "",
      params.mapQual ? "--minimum-mapping-quality ${params.mapQual}" : "",
      params.targetBed || params.noIntervals ? "--f1r2-tar-gz ${meta.id}_f1r2.tar.gz" : "--f1r2-tar-gz ${meta.id}_${intervals.simpleName}_f1r2.tar.gz",
    ].join(' ').trim()}
    ext.when = { params.tools && params.tools.contains('mutect2') }
    ext.prefix = { params.targetBed || params.noIntervals ? "${meta.id}_Mutect2" : "${meta.id}_${intervals.simpleName}" }
  }

  withName: 'mutect2TumorOnlyFlow:mergeVCFs' {
    publishDir = [
      path: {"${params.outDir}/mutect2/${meta.id}/"},
      mode: 'copy',
      pattern: '*{.vcf.gz, vcf.gz.tbi}',
      enabled: params.saveVcfIntermediates
    ]
    ext.prefix = { "${meta.id}_Mutect2" }
    ext.when = { !params.noIntervals && !params.targetBed }
  }

  withName: 'mutect2TumorOnlyFlow:getPileupSummaries' {
    publishDir = [
      path: {"${params.outDir}/mutect2/${meta.id}/contamination/"},
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename },
      enabled: { params.saveVcfIntermediates && (params.noIntervals || params.targetBed) }
    ]
    ext.prefix = { params.targetBed || params.noIntervals ? "${meta.id}" : "${meta.id}_${intervals.simpleName}" }
    ext.when = {  !params.skipMutectContamination }
  }

  withName: 'mutect2TumorOnlyFlow:gatherPileupSummaries' {
    publishDir = [
      path: {"${params.outDir}/mutect2/${meta.id}/contamination/"},
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename },
      enabled: params.saveVcfIntermediates
    ]
    ext.when = {  !params.skipMutectContamination && !params.noIntervals && !params.targetBed }
  }

  //**************************
  // Mutect2 Pairs/Tumor only
  //**************************

  withName: 'mergeMutect2Stats' {
    publishDir = [
      path: {"${params.outDir}/mutect2/${meta.id}/stats/"},
      mode: 'copy',
      enabled: params.saveVcfIntermediates
    ]
    ext.when = { !params.noIntervals && !params.targetBed }
  }

  withName: 'learnReadOrientationModel' {
    publishDir = [
      path: {"${params.outDir}/mutect2/${meta.id}/orientation/"},
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename },
      enabled: params.saveVcfIntermediates
    ]
    ext.when = { !params.skipMutectOrientationModel }
  }

  withName: 'calculateContamination' {
    publishDir = [
      path: {"${params.outDir}/mutect2/${meta.id}/contamination/"},
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename },
      enabled: params.saveVcfIntermediates
    ]
    ext.when = { !params.skipMutectContamination }
  }

  withName: 'filterMutect2Calls' {
    publishDir = [[
      path: {"${params.outDir}/mutect2/${meta.id}/"},
      mode: 'copy',
      pattern: '*filtered{.vcf.gz,.vcf.gz.tbi}',
      enabled: params.saveVcfIntermediates
      ],
      [
      path: {"${params.outDir}/mutect2/${meta.id}/stats"},
      mode: 'copy',
      pattern: '*filteringStats.tsv'
    ]]
    ext.prefix = { "${vcf.simpleName}" }
  }

  withName: 'mutect2TumorOnlyFlow:bcftoolsNorm|mutect2PairsFlow:bcftoolsNorm' {
    publishDir = [
      path: {"${params.outDir}/mutect2/${meta.id}/"},
      mode: 'copy',
      pattern: '*_norm.vcf.gz*'
    ]
    ext.prefix = { "${vcf.simpleName}" }
  }

  //*******************
  // VCF Post-process and QC
  //*******************

  withName: 'filterVcf' {
    ext.prefix = { "${vcf.simpleName}" }
  }

  withName: 'collectVCFmetrics' {
    publishDir = [
      path: {"${params.outDir}/mutect2/${meta.id}/stats"},
      mode: 'copy',
      pattern: '*_callingMetrics.mqc',
      enabled: params.saveVcfMetrics
    ]
    ext.prefix = { "${vcf.simpleName}" }
  }

  withName: 'computeTransition' {
    publishDir = [
      path: {"${params.outDir}/mutect2/${meta.id}/tstv"},
      mode: 'copy',
      enabled: params.saveVcfMetrics
    ]
    ext.args = { "${meta.status}" == "pair" ? "--sample ${meta.tumor_id}" : "--sample ${meta.id}" }
    ext.prefix = { "${vcf[0].simpleName}" } 
  }

  //******************************************
  // Annotate
  //******************************************

  withName:'annotateFlow:snpEff' {
    publishDir = [
      path: { "${params.outDir}/snpEff/${meta.id}/" },
      mode: 'copy',
      pattern: '*{csv,txt,html,snpEff.vcf.gz}',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
    ext.prefix = { "${vcf[0].simpleName}" }
    ext.args = params.snpeffOpts ?: ''
  }

  withName:'annotateFlow:snpSiftCosmic'{
    publishDir = [
      path: {"${params.outDir}/snpEff/${meta.id}/" },
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename },
      enabled: { params.annotDb && !params.annotDb.contains("icgc|cancerhotspots|gnomad|dbnsfp") }
    ]
    ext.prefix = {"${vcf[0].simpleName}_COSMIC"}
    ext.args = "-tabix -noId -noInfo -exists COSMIC"
    ext.when = { params.annotDb && params.annotDb.contains('cosmic') }
  }

  withName:'annotateFlow:snpSiftIcgc'{
    publishDir = [
      path: {"${params.outDir}/snpEff/${meta.id}/" },
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename },
      enabled: { params.annotDb && !params.annotDb.contains('cancerhotspots|gnomad|dbnsfp') }
    ]
    ext.prefix = { "${vcf[0].simpleName}_ICGC" }
    ext.args = "-tabix -noId -noInfo -exists ICGC"
    ext.when = { params.annotDb && params.annotDb.contains('icgc') }
  }

  withName:'annotateFlow:snpSiftCancerHotspots'{
    publishDir = [
      path: {"${params.outDir}/snpEff/${meta.id}/" },
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename },
      enabled: { params.annotDb && !params.annotDb.contains('gnomad|dbnsfp') }
    ]
    ext.prefix = { "${vcf[0].simpleName}_CancerHotspots" }
    ext.args = "-tabix -noId -noInfo -exists CancerHotspots"
    ext.when = { params.annotDb && params.annotDb.contains('cancerhotspots') }
  }

  withName:'annotateFlow:snpSiftGnomAD'{
    publishDir = [
      path: {"${params.outDir}/snpEff/${meta.id}/" },
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename },
      enabled: { params.annotDb && !params.annotDb.contains('dbnsfp') }
    ]
    ext.prefix = { "${vcf[0].simpleName}_GnomAD" }
    ext.args = "-tabix -noId -Info AF -exists gnomAD"
    ext.when = { params.annotDb && params.annotDb.contains('gnomad') }
  }

  withName:'annotateFlow:snpSiftDbnsfp'{
    publishDir = [
      path: {"${params.outDir}/snpEff/${meta.id}/" },
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
    ext.prefix={ "${vcf[0].simpleName}_dbNSFP" }
    ext.args="-f SIFT_pred,Polyphen2_HDIV_pred,CADD_phred -collapse"
    ext.when = { params.annotDb && params.annotDb.contains('dbnsfp') }
  }

  withName:'tableReportFlow:snpSiftExtractFields'{
    publishDir = [
      path: {"${params.outDir}/tableReport/${meta.id}/" },
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
    ext.prefix = { "${vcf[0].simpleName}" }
    ext.args=" -e '.'  -s ';'"
    ext.args2={[
      "CHROM POS REF ALT ANN[0].GENE ANN[0].IMPACT ANN[0].EFFECT ANN[0].FEATUREID ANN[0].RANK ANN[0].HGVS_C ANN[0].HGVS_P",
      params.annotDb && params.annotDb.contains('cosmic') ? 'COSMIC' : '',
      params.annotDb && params.annotDb.contains('icgc') ? 'ICGC' : '',
      params.annotDb && params.annotDb.contains('cancerhotspots') ? 'CancerHotspots' : '',
      params.annotDb && params.annotDb.contains('gnomad') ? 'gnomAD' : '',
      params.annotDb && params.annotDb.contains('gnomad') ? 'AF' : ''
    ].join(' ').trim()}
  }

  //******************************************
  // TMB
  //******************************************

  withName:'tmb' {
    publishDir = [
      path: { "${params.outDir}/tmb/${meta.id}/" },
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
    ext.args = {[
      "${meta.status}" == "pair" ? "--sample ${meta.tumor_id}" : "--sample ${meta.id}",
      params.ffpe ? params.tmbFiltersFFPE : params.tmbFiltersFrozen
    ].join(' ').trim()}
    ext.when = { params.tools && params.tools.contains('tmb') }
    ext.prefix = { "${vcf[0].simpleName}" }
  }


  //*******************************************
  // MSI
  //*******************************************

  withName:'msisensorproMsi' {
    ext.when = {  params.tools && params.tools.contains('msisensor')}
    publishDir = [
      path: { "${params.outDir}/msi/${meta.id}/" },
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
  }

  //*******************************************
  // Manta
  //*******************************************

  withName:'manta' {
    ext.when = {  params.tools && params.tools.contains('manta') && !params.singleEnd }
    publishDir = [
      [
        path: { "${params.outDir}/manta/${meta.id}/" },
        mode: 'copy',
        pattern: '*somatic*'
      ],
      [
        path: { "${params.outDir}/manta/${meta.id}/" },
        mode: 'copy',
        pattern: '*{diploid,candidate}*',
        enabled: params.saveVcfIntermediates
      ]
    ]
    ext.beforeScript = { params.targetBed ? "bgzip --threads ${task.cpus} -c ${targetBed} > call_targets.bed.gz ; tabix call_targets.bed.gz" : "" }
    //ext.prefix = { "${meta.status}" == "pair" ? "${meta.tumor_id}_vs_${meta.normal_id}" : "${meta.id}" }
    ext.args = { params.targetBed ? "--exome --callRegions call_targets.bed.gz" : "" }
  }

  //******************************************
  // facets
  //******************************************

  withName:'facetsPileup' {
    ext.when = {  params.tools && params.tools.contains('facets')}
  }

  withName:'facets' {
    publishDir = [
      path: { "${params.outDir}/facets/${meta.id}/" },
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
    ext.when = {  params.tools && params.tools.contains('facets')}
    ext.args = { params.facetsOpts ?: "" }
    ext.prefix = { "${meta.status}" == "pair" ? "${meta.tumor_id}_vs_${meta.normal_id}" : "${meta.id}" } 
  }

  //******************************************
  // ASCAT
  //******************************************

  withName:'alleleCounter' {
    ext.when = {  params.tools && params.tools.contains('ascat')}
  }

  withName:'convertAlleleCounts' {
    publishDir = [
      path: { "${params.outDir}/ascat/${meta.id}/" },
      mode: 'copy'
    ]
    ext.when = {  params.tools && params.tools.contains('ascat')}
  }

  withName:'ascat' {
    publishDir = [
      path: { "${params.outDir}/ascat/${meta.id}/" },
      mode: 'copy'
    ]
    ext.when = {  params.tools && params.tools.contains('ascat')}
  }

  //******************************************
  // MultiQC
  //******************************************

  withName:'multiqc' {
    publishDir = [
      path: { "${params.outDir}/multiQC" },
      mode: 'copy'
    ]
  }

  /*
   * Utils
   */
  withName:'checkDesign' {
    ext.when = params.design
    ext.args = params.singleEnd ? '--singleEnd' : ''
  }

  withName:'getSoftwareVersions' {
    publishDir = [
      path: { "${params.summaryDir}/softwareVersions" },
      mode: 'copy'
    ]
  }

  withName:'outputDocumentation' {
    publishDir = [
      path: { "${params.summaryDir}" },
      mode: 'copy'
    ]
  }
}
