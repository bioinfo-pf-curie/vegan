/*
 * Define modules options
 */

process {

  // Default
  publishDir = [
    path: { "${params.outDir}/${task.process.tokenize(':')[-1].tokenize('_')[0]}" },
    mode: 'copy',
    saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
  ]

  //*******************************************
  // MAPPING
  //*******************************************

  withName:'bwaMem' {
    publishDir = [
      [
        path: { "${params.outDir}/mapping" },
	mode: 'copy',
	pattern: "*.bam",
	enabled: params.saveAlignedIntermediates
      ],
      [
        path: { "${params.outDir}/mapping/logs" },
	mode: 'copy',
	pattern: "*.log"
      ]
    ]
    // ext.args = params.bwaOptions ?: ''
    ext.args = {[
        params.bwaOptions ?: '',
        "-R \"@RG\\tID:${meta.id}\\tPU:${meta.id}\\tSM:${meta.name}\\tLB:${meta.name}\\tPL:illumina\""
    ].join(' ').trim() }
    }

  withName: 'samtoolsSort' {
    publishDir = [
      path: { "${params.outDir}/preprocessing/" },
      mode: 'copy',
      pattern: '*.bai'
    ]
  }

  withName: 'samtoolsIndex' {
    publishDir = [
      path: { "${params.outDir}/mapping" },
      mode: 'copy',
      pattern: '*.bai'
    ]
  }

  //*******************************************
  // Preseq
  //*******************************************

  withName: 'preseq' {
    publishDir = [
      path: { "${params.outDir}/preprocessing/metrics/preseq" },
      mode: 'copy',
      pattern: '*.bai'
    ]
    ext.args = '-e 500e+06'
  }

  //*******************************************
  // Filtering
  //*******************************************


  withName:'sambambaMarkdup' {
    publishDir = [
      [
        path: { "${params.outDir}/preprocessing/bams/markDuplicates" },
        mode: 'copy',
        pattern: "*md.bam",
        enabled: params.saveAlignedIntermediates
      ],
      [
        path: { "${params.outDir}/preprocessing/bams/markDuplicates/stats" },
        mode: 'copy',
        pattern: '*md.flagstats'
      ]
    ]
  }

  withName:'bamOnTarget' {
    publishDir = [
      [
        path: { "${params.outDir}/preprocessing/bams/onTarget" },
        mode: 'copy',
        pattern: "*_onTarget.bam",
        enabled: params.saveAlignedIntermediates
      ],
      [
        path: { "${params.outDir}/preprocessing/bams/onTarget/stats" },
        mode: 'copy',
        pattern: '*_onTarget.flagstats'
      ]
    ]
  }

  withName: 'samtoolsFilter' {
    publishDir = [
        path: { "${params.filteredBamDir}" },
        mode: 'copy',
        pattern: "*filtered.bam",
        enabled: params.saveAlignedIntermediates
        ]
    ext.args = [
      params.keepDups ? "" : "-F 0x0400",
      params.mapQual > 0 ? "-q ${params.mapQual}" : "",
      params.keepSingleton ? "-F 0x004 -F 0x008 -f 0x001" : "-F 0x004",
      // TODO: utiliser meta.singleEnd
      params.singleEnd ? "-F 0x001" : "",
      params.keepMultiHits ? "-F 0x100 -F 0x800" : ""
    ].join(' ').trim()
  }

  withName: 'samtoolsFlagstat' {
    publishDir = [
      path: {"${params.filteredBamDir}/stats"},
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
  }

  withName: 'samtoolsIdxstats' {
  publishDir = [
    path: {"${params.filteredBamDir}/stats"},
    mode: 'copy',
    saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
  }

  withName: 'samtoolsStats' {
    publishDir = [
      path: {"${params.filteredBamDir}/stats"},
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
  }

  //*******************************************
  // Bam QC
  //*******************************************


  withName: 'getFragmentSize' {
    publishDir = [
      path: { "${params.outDir}/preprocessing/metrics/fragSize" },
      mode: 'copy',
      pattern: '*_insert_size_{hist.pdf,metrics.txt}',
    ]
  }

  withName: 'getSeqDepth' {
    publishDir = [
      [
      path: { "${params.outDir}/preprocessing/metrics/depth" },
      mode: 'copy',
      pattern: '*{.bed.gz,.bed.gz.csi}'
      ],
      [
      path: { "${params.outDir}/preprocessing/metrics/depth" },
      mode: 'copy',
      pattern: '*.*.txt'
      ]

    ]
    ext.args = [
    params.targetBed ? "--by ${params.targetBed}" : ""
    ].join(' ').trim()
  }

  withName: 'prepareExonInfo' {
    ext.args = { params.targetBed ? " | intersectBed -a stdin -b ${params.targetBed} " : "" }
  }

  withName: 'genesCoverage' {
    publishDir = [
      path: { "${params.outDir}/preprocessing/metrics/depth" },
      mode: 'copy',
      pattern: '*{.pdf,.mqc}'
    ]
  }

  withName: 'getWGSmetrics' {
    publishDir = [
      path: { "${params.outDir}/preprocessing/metrics/WGSmetrics" },
      mode: 'copy',
      pattern: '*metrics.txt'
    ]
    ext.args = { params.targetBed ? "gatk BedToIntervalList -I ${params.targetBed} -O intervals.bed -SD ${params.dict}": "" }
    ext.args2 = { params.targetBed ? "--INTERVALS intervals.bed" : "" }
  }

  //*******************************************
  // Identito
  //*******************************************

  withName:'identitoPolym' {
    publishDir = [
      path: {"${params.outDir}/preprocessing/identito/"}
    ]
  }

  //*******************************************
  // BQSR
  //*******************************************

  withName:'baseRecalibrator' {
    publishDir = [
      path: {"${params.bqsrBamDir}"},
      mode: 'copy',
      saveAs: { filename ->  if (params.noIntervals) filename }
    ]
    ext.args = {params.targetBed ? "-L ${params.targetBed}" : "" }
    // ext.prefix = {params.noIntervals ? "${meta.id}" : "${meta.id}_${intervalBed.baseName}"},
    // ext.args = { params.noIntervals ? params.targetBed ? "-L ${params.targetBed}" : "" : "-L ${intervalBed}" }
  }

  withName:'applyBQSR' {
    ext.args = {params.targetBed ? "-L ${params.targetBed}" : "" }
    // ext.prefix = {params.noIntervals ? "${meta.id}" : "${meta.id}_${intervalBed.baseName}"},
    // ext.args = { params.noIntervals ? params.targetBed ? "-L ${params.targetBed}" : "" : "-L ${intervalBed}" }
  }

  withName:'indexBamRecal' {
    publishDir = [
      path: {"${params.bqsrBamDir}"},
      mode: 'copy'
    ]
  }

  withName:'outputDocumentation' {
    publishDir = [
      path: { "${params.summaryDir}" },
      mode: 'copy'
    ]
  }
}
