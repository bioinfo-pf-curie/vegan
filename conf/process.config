/*
 * -------------------------------------------------
 *  Nextflow process config file
 * -------------------------------------------------
 *
 */

process {
  cpus = {check_resource(params.cpus * task.attempt)}
  memory = {check_resource((params.singleCPUMem as nextflow.util.MemoryUnit) * task.attempt)}
  time = {check_resource(24.h * task.attempt)}
  shell = ['/bin/bash', '-euo', 'pipefail']

  errorStrategy = { task.exitStatus in [143,137,104,134,135,139] ? 'retry' : 'finish' } 
  maxRetries = 3
  maxErrors = '-1'
  
//  withName:outputDocumentation {
//    memory = { checkMax( 100.MB, 'memory' ) }
//  }
//  withName:workflowSummaryMqc {
//    cpus = { checkMax (1, 'cpus') }
//    memory = { checkMax( 10.MB, 'memory' ) }
//    executor = 'local'
//  }
  withLabel:cpus_1 {
    cpus = {check_resource(1)}
  }
  withLabel:cpus_2 {
    cpus = {check_resource(2)}
  }
  withLabel:cpus_4 {
    cpus = {check_resource(4)}
  }
  withLabel:cpus_8 {
    cpus = {check_resource(8)}
  }
  withLabel:cpus_16 {
    cpus = {check_resource(16)}
  }
  withLabel:cpus_max {
    cpus = {params.maxCpus}
  }

  withLabel:memory_singleCPU_2_task {
    memory = {check_resource((params.singleCPUMem as nextflow.util.MemoryUnit) * 2 * task.attempt)}
  }
  withLabel:memory_singleCPU_task_sq {
    memory = {check_resource((params.singleCPUMem as nextflow.util.MemoryUnit) * task.attempt * task.attempt)}
  }

  withLabel:memory_max {
    memory = {params.maxMemory}
  }

  withLabel: smallCpu { cpus = 1 }
  withLabel: medCpu { cpus = 6 }
  withLabel: bigCpu { cpus = 12 }
  withLabel: smallMem { memory = '2 GB' }
  withLabel: medMem { memory = '50 GB' }
  withLabel: bigMem { memory = '120 GB' }
}

